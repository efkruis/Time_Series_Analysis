.date_var = date,
.value = rel_interest,
.facet_vars = country,
.facet_ncol = 2,
.interactive = FALSE
)
interest_work %>%
plot_seasonal_diagnostics(
.date_var = date,
.value = rel_interest,
.facet_vars = country,
.interactive = FALSE)
interest_work %>%
plot_seasonal_diagnostics(
.date_var = date,
.value = rel_interest,
.facet_vars = country,
.interactive = TRUE)
interest_work %>%
plot_seasonal_diagnostics(
.date_var = date,
.value = rel_interest,
.facet_vars = country,
.interactive = FALSE)
interest_work %>%
group_by(country) %>%
plot_acf_diagnostics(
.date_var = date,
.value = rel_interest,
.lags = "2 years",
.show_white_noise_bars = TRUE,
.interactive = FALSE)
gb_ts <- interest_work %>%
filter(country == "Great Britain")
data_split <- gb_ts %>%
time_series_split(
date_var = date,
assess = "18 months",
cumulative = TRUE)
data_split %>%
tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(
.date_var = date,
.value = rel_interest,
.interactive = TRUE)
data_split %>%
tk_time_series_cv_plan()
data_split %>%
tk_time_series_cv_plan() %>% print(n=Inf)
recipe_spec <-
recipe(rel_interest ~ date, training(data_split)) %>%
step_timeseries_signature(date) %>%
step_rm(
matches("(.iso$)|(.xts$)|(week)|(day)|(hour)|(minute)|(second)|(am.pm)")
) %>%
step_normalize(date_index.num, date_year) %>%
step_dummy(all_nominal(), one_hot = TRUE)
model_features <- recipe_spec %>%
prep() %>%
bake(new_data = NULL)
glimpse(model_features)
wrkflw_fit_ets <- workflow() %>%
add_model(
exp_smoothing() %>%
set_engine(engine = "ets")
) %>%
add_recipe(
recipe_spec %>%
step_rm(
all_predictors(),
-date) ) %>%
fit(training(data_split))
wrkflw_fit_ets
wrkflw_fit_arima <- workflow() %>%
add_model(
arima_reg() %>%
set_engine(engine = "auto_arima")
) %>%
add_recipe(
recipe_spec %>%
step_rm(
all_predictors(),
-date
) ) %>%
fit(training(data_split))
wrkflw_fit_arima
wrkflw_fit_arima_boost <- workflow() %>%
add_model(
arima_boost() %>%
set_engine(engine = "auto_arima_xgboost")
) %>%
add_recipe(
recipe_spec
) %>%
fit(training(data_split))
wrkflw_fit_arima_boost
##prophet
wrkflw_fit_prophet <- workflow() %>%
add_model(
prophet_reg() %>%
set_engine(engine = "prophet")
) %>%
add_recipe(
recipe_spec %>%
step_rm(
all_predictors(),
-date
) ) %>%
fit(training(data_split))
wrkflw_fit_prophet
##prophet boost
wrkflw_fit_prophet_boost <- workflow() %>%
add_model(
prophet_boost() %>%
set_engine(engine = "prophet_xgboost")
) %>%
add_recipe(
recipe_spec
) %>%
fit(training(data_split))
wrkflw_fit_prophet_boost
### load libraries for use in current working session
## here for project work flow
library(here)
## tidyverse for data manipulation and plotting
## loads eight different libraries simultaneously
library(tidyverse)
## skimr to summarize data
library(skimr)
## flextable for creating tables
library(flextable)
## lubridate to work with dates
library(lubridate)
## tidymodels for modeling flow
library(tidymodels)
## timetk for time series data manipulation
library(timetk)
## modeltime for time series models
library(modeltime)
## modeltime.ensemble to combine time series models
library(modeltime.ensemble)
interest_raw <- readRDS(
here("data", "job_interest_search.rds"))
str(interest_raw)
interest_raw %>%
pluck("interest_over_time") %>%
slice_tail(n=7)
interest_work <- interest_raw %>%
pluck("interest_over_time") %>%
as_tibble() %>%
select(date, hits, geo) %>%
mutate(
date = ymd(date),
geo = as_factor(geo),
geo = fct_recode(
geo,
# USA
"United States of America" = "US",
# India
"India" = "IN",
# Great Britain
"Great Britain" = "GB",
# Australia
"Australia" = "AU",
# Brazil
"Brazil" = "BR"
)
) %>%
rename(
rel_interest = hits,
country = geo
)
##preview
interest_work %>%
arrange(desc(rel_interest))
interest_work %>%
group_by(country) %>%
select(rel_interest) %>%
skim_without_charts()
interest_work %>%
plot_time_series(
.date_var = date,
.value = rel_interest,
.facet_vars = country,
.facet_scales = "fixed",
.facet_ncol = 2,
.color_var = year(date),
.x_lab = "Date",
.y_lab = "Relative Search Interest",
.color_lab = "Year",
.title = "Relative Search Interest by Country",
.interactive = FALSE)
interest_work %>%
plot_anomaly_diagnostics(
.date_var = date,
.value = rel_interest,
.facet_vars = country,
.facet_ncol = 2,
.interactive = FALSE
)
interest_work %>%
plot_seasonal_diagnostics(
.date_var = date,
.value = rel_interest,
.facet_vars = country,
.interactive = FALSE)
interest_work %>%
group_by(country) %>%
plot_acf_diagnostics(
.date_var = date,
.value = rel_interest,
.lags = "2 years",
.show_white_noise_bars = TRUE,
.interactive = FALSE)
gb_ts <- interest_work %>%
filter(country == "Great Britain")
data_split <- gb_ts %>%
time_series_split(
date_var = date,
assess = "18 months",
cumulative = TRUE)
data_split %>%
tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(
.date_var = date,
.value = rel_interest,
.interactive = TRUE)
recipe_spec <-
recipe(rel_interest ~ date, training(data_split)) %>%
step_timeseries_signature(date) %>%
step_rm(
matches("(.iso$)|(.xts$)|(week)|(day)|(hour)|(minute)|(second)|(am.pm)")
) %>%
step_normalize(date_index.num, date_year) %>%
step_dummy(all_nominal(), one_hot = TRUE)
model_features <- recipe_spec %>%
prep() %>%
bake(new_data = NULL)
glimpse(model_features)
wrkflw_fit_ets <- workflow() %>%
add_model(
exp_smoothing() %>%
set_engine(engine = "ets")
) %>%
add_recipe(
recipe_spec %>%
step_rm(
all_predictors(),
-date) ) %>%
fit(training(data_split))
wrkflw_fit_ets <- workflow() %>%
add_model(
exp_smoothing() %>%
set_engine(engine = "ets")
) %>%
add_recipe(
recipe_spec %>%
step_rm(
all_predictors(),
-date) ) %>%
fit(training(data_split))
wrkflw_fit_ets
wrkflw_fit_arima <- workflow() %>%
add_model(
arima_reg() %>%
set_engine(engine = "auto_arima")
) %>%
add_recipe(
recipe_spec %>%
step_rm(
all_predictors(),
-date
) ) %>%
fit(training(data_split))
wrkflw_fit_arima
wrkflw_fit_arima_boost <- workflow() %>%
add_model(
arima_boost() %>%
set_engine(engine = "auto_arima_xgboost")
) %>%
add_recipe(
recipe_spec
) %>%
fit(training(data_split))
wrkflw_fit_arima_boost
interest_work %>%
group_by(country) %>%
select(rel_interest) %>%
skim_without_charts()
##prophet
wrkflw_fit_prophet <- workflow() %>%
add_model(
prophet_reg() %>%
set_engine(engine = "prophet")
) %>%
add_recipe(
recipe_spec %>%
step_rm(
all_predictors(),
-date
) ) %>%
fit(training(data_split))
wrkflw_fit_prophet
##prophet boost
wrkflw_fit_prophet_boost <- workflow() %>%
add_model(
prophet_boost() %>%
set_engine(engine = "prophet_xgboost")
) %>%
add_recipe(
recipe_spec
) %>%
fit(training(data_split))
wrkflw_fit_prophet_boost
wrkflw_fit_prophet
wrkflw_fit_prophet_boost
models_tbl <- modeltime_table(
wrkflw_fit_ets,
wrkflw_fit_arima,
wrkflw_fit_arima_boost,
wrkflw_fit_prophet,
wrkflw_fit_prophet_boost)
ensemble_set <- models_tbl %>%
ensemble_average(type = "mean")
ensemble_tbl <- modeltime_table(
ensemble_set
) %>%
combine_modeltime_tables(models_tbl)
models_calibrate <- ensemble_tbl %>%
modeltime_calibrate(
testing(data_split)
)
models_calibrate %>%
unnest(.calibration_data) %>%
print(n = Inf)
ensemble_set
ensemble_tbl
models_calibrate
models_calibrate
models_calibrate <- ensemble_tbl %>%
modeltime_calibrate(
testing(data_split)
)
models_calibrate %>%
unnest(.calibration_data) %>%
print(n = Inf)
models_calibrate_plot <- models_calibrate %>%
modeltime_forecast(
new_data = testing(data_split),
actual_data = gb_ts
) %>%
plot_modeltime_forecast(
.interactive = FALSE
)
models_calibrate_plot
models_calibrate %>%
modeltime_accuracy() %>%
flextable() %>%
bold(part = "header") %>%
bg(bg = "#D3D3D3", part = "header") %>%
autofit()
models_calibrate_plot <- models_calibrate %>%
modeltime_forecast(
new_data = testing(data_split),
actual_data = gb_ts
) %>%
plot_modeltime_forecast(
.interactive = FALSE
)
models_calibrate_plot
models_calibrate_plot <- models_calibrate %>%
modeltime_forecast(
new_data = testing(data_split),
actual_data = gb_ts
) %>%
plot_modeltime_forecast(
.interactive = TRUE
)
models_calibrate_plot
models_calibrate %>%
modeltime_accuracy() %>%
flextable() %>%
bold(part = "header") %>%
bg(bg = "#D3D3D3", part = "header") %>%
autofit()
models_refit
models_forecast
models_forecast_plot
models_forecast_plot
saveRDS(
interest_work,
file = here("data", "interest_work.rds"))
ggsave(
here("plots", "models_calibrate.png"),
plot = models_calibrate_plot,
units = "in", width = 9, height = 6)
ggsave(
here("plots", "models_forecast.png"),
plot = models_forecast_plot,
units = "in", width = 9, height = 6)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
ggsave(
here("plots", "models_calibrate.png"),
plot = models_calibrate_plot,
units = "in", width = 9, height = 6)
library(ggplot2)
ggsave(
here("plots", "models_calibrate.png"),
plot = models_calibrate_plot,
units = "in", width = 9, height = 6)
library(here)
gsave(
here("plots", "models_calibrate.png"),
plot = models_calibrate_plot,
units = "in", width = 9, height = 6)
ggsave(
here("plots", "models_calibrate.png"),
plot = models_calibrate_plot,
units = "in", width = 9, height = 6)
### load libraries for use in current working session
## here for project work flow
library(here)
## tidyverse for data manipulation and plotting
## loads eight different libraries simultaneously
library(tidyverse)
## skimr to summarize data
library(skimr)
## flextable for creating tables
library(flextable)
## lubridate to work with dates
library(lubridate)
## tidymodels for modeling flow
library(tidymodels)
## timetk for time series data manipulation
library(timetk)
## modeltime for time series models
library(modeltime)
## modeltime.ensemble to combine time series models
library(modeltime.ensemble)
saveRDS(
interest_work,
file = here("data", "interest_work.rds"))
ggsave(
here("plots", "models_calibrate.png"),
plot = models_calibrate_plot,
units = "in", width = 9, height = 6)
ggsave(
here("plots", "models_forecast.png"),
plot = models_forecast_plot,
units = "in", width = 9, height = 6)
### specify echo setting for all code chunks
## call function
knitr::opts_chunk$set(echo = TRUE)
### load libraries for use in current working session
## here for project work flow
library(here)
## tidyverse for data manipulation and plotting
## loads eight different libraries simultaneously
library(tidyverse)
## skimr to summarize data
library(skimr)
## flextable for creating tables
library(flextable)
## lubridate to work with dates
library(lubridate)
## tidymodels for modeling flow
library(tidymodels)
## timetk for time series data manipulation
library(timetk)
## modeltime for time series models
library(modeltime)
## modeltime.ensemble to combine time series models
library(modeltime.ensemble)
interest_raw <- readRDS(
here("data", "job_interest_search.rds"))
str(interest_raw)
interest_raw %>%
pluck("interest_over_time") %>%
slice_tail(n=7)
interest_work %>%
group_by(country) %>%
plot_acf_diagnostics(
.date_var = date,
.value = rel_interest,
.lags = "2 years",
.show_white_noise_bars = TRUE,
.interactive = FALSE)
wrkflw_fit_arima <- workflow() %>%
add_model(
arima_reg() %>%
set_engine(engine = "auto_arima")
) %>%
add_recipe(
recipe_spec %>%
step_rm(
all_predictors(),
-date
) ) %>%
fit(training(data_split))
wrkflw_fit_arima
wrkflw_fit_arima_boost <- workflow() %>%
add_model(
arima_boost() %>%
set_engine(engine = "auto_arima_xgboost")
) %>%
add_recipe(
recipe_spec
) %>%
fit(training(data_split))
wrkflw_fit_arima_boost
